openapi: "3.0.0"
info:
  version: 1.0.0
  title: Drugstore API
  description: |-
    # Introduction
    Welcome to the **Drugstore API v 1.0.0**

    This API currently supports retrieving products (with details) and adding new products to our DB.

    # Authentication
    This API is protected with OAuth OIDC authentication protocol. In order to use this API commercially please contact us to register with our Authorization Server and obtain your cliend_id and secret. You will be then able to get an access token to call the API with. The process overview is shown at the diagram below.

    ![Sample OIDC sequence diagram](https://d33wubrfki0l68.cloudfront.net/3ad9fa733a0ced7c349230beaf1e481560aa6065/602fe/assets-jekyll/blog/client-creds-with-spring-boot/client-creds-jwt-90615dab46fe5a23d5bca2a29ec42e518683860826b70840fa2a6cea62108440.png)

    For further details please refer to the OAuth 2.0 RFC (Client Credentials Grant section).

    [OAuth2 RFC - Client Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.4)
    # Example responses
    This API documentation is available together with a Swaggerhub Mock Server returning sample responses to respective endpoints. Please note that the Mock server does not require an access token and is returning predefined, sample, static responses.
    The Mock Server address is available below.
  contact:
    email: testksa@testksa.pl
  
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Sample Mock Server
    url: https://virtserver.swaggerhub.com/test-ksa/Drugstore/1.0.0
paths:
  /products:
    get:
      summary: Returns a list of all products
      description: This resource returns an array of all available products and their basic attributes.
      operationId: listProducts
      tags:
        - Product Management
      parameters: 
        - $ref: "#/components/parameters/requestIdHeader"
        - $ref: "#/components/parameters/authorizationHeader"
      responses:
        '200':
          description: A paged array of products
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Products"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
    post:
      summary: Adds a new product
      description: 
        This resource lets you add a new product to the DB. You can provide the product attributes.
        The product id will be automatically generated and returned in the response body. 
        Currently supported product categories are
        
          * OTC 
          
          * Prescription
        
      operationId: createProduct
      tags:
        - Product Management
      requestBody:
        description: Product to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product added
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
  /products/{productId}:
    get:
      summary: Detailed info for a specific product
      operationId: showProductById
      tags:
        - Product Management
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetails"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        
components:
  responses:
    400:
      description: Bad Request
      content:
        application/json:
          schema:
              $ref: "#/components/schemas/Error"
          examples:
            MissingHeader:
              value:
                code: 'missing_request_id'
                message: 'Error - missing request header: X-REQUEST-ID'
            InvalidSchema:
              value:
                code: 'invalid_schema'
                message: 'Error - invalid input json schema - missing field: name'
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            InvalidToken:
              value:
                code: 'invalid_token'
                message: 'Error - access token is invalid / expired'
  parameters:
    authorizationHeader:    
      name: Authorization
      in: header
      description: OAuth2 Access Token
      required: true
      example: Bearer edKKACtPAb7zGlwSzvs72PvhAbGmB8K1ZrGxpcNM
      schema:
            type: string
    requestIdHeader:    
      name: X-REQUEST-ID
      in: header
      description: Unique request identifier
      required: true
      example: a6aa32cc-f9ce-11ea-adc1-0242ac120002
      schema:
            type: string
            format: uuid
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - category
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          $ref: "#/components/schemas/ProductCategories"
        tag:
          type: string
    ProductDetails:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          $ref: "#/components/schemas/ProductCategories"
        tag:
          type: string
        description:
          type: string
    NewProduct:
      type: object
      required:
        - name
        - category
      properties:
        name:
          type: string
        category:
          $ref: "#/components/schemas/ProductCategories"
        tag:
          type: string
    ProductCategories:
      type: string
      enum: 
        - 'OTC'
        - 'Prescription'
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string